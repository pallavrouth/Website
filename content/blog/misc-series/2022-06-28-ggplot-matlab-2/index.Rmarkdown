---
title: 'Matlab style plots using ggplot2 (Part 2)'
subtitle: "Create Matlab style plots in ggplot2 facets"
excerpt: "Codes to create scientific plots in ggplot2 that look like Matlab plots but applied to facets"
author: Pallav Routh
date: '2022-01-14'
slug: 
  - ggplot2-matlab
categories:
  - Manuscript
  - Visualization
tags:
  - ggplot2
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(purrr)
library(ggh4x)
```

```{r}
data("FANG", package = "tidyquant")
```

In an earlier post I demonstrate how `ggplot` can be used to replicate Matlab style plots. In this short post I demonstrate how to apply the same design to `ggplot2` facets.

Here is the "scientific" theme from the previous post

```{r}
theme_scientific <-
  theme(axis.line = element_line(color = "black"),
        axis.text.x = element_text(color = "black",
                                   size = 12,
                                   margin = unit(c(0.2, 0.1, 0.1, 0.5), "cm")),
        axis.text.y = element_text(color = "black",
                                   size = 12,
                                   margin = unit(c(0.1, 0.1, 0.2, 0.1), "cm")),
        axis.title = element_text(colour = "black", size = 12),
        axis.ticks.length = unit(-0.30, "cm"),
        panel.border = element_rect(colour = "black", fill = NA, size = 0.2),
        panel.background = element_rect(fill = "white", colour = "white"),
        panel.grid.minor = element_blank(),
        panel.grid.major = element_line(colour = "#ddd8d8", linetype = 1, size = 0.5),
        strip.placement = "outside")
```

Let's use this theme to create our facetted plot. In this example, we will create a time series plot showing historical stock prices for 4 major companies -

```{r}
FANG %>% 
  group_by(symbol) %>% 
    mutate(`time period` = 1:n()) %>% 
  ungroup() %>% 
  ggplot(aes(x = `time period`, y = adjusted)) +
   geom_line() +
   facet_wrap(~symbol, scales = "free") +
   theme_scientific
```

Next, lets create function that supplies breaks and limits for the x and y axis -

```{r}
auto_breaks <- function(series, num_breaks = 4, adjustment_factor = 2) {
  min_series <- min(series, na.rm = TRUE)
  max_series <- max(series, na.rm = TRUE)
  skips <- (max_series - min_series) / num_breaks
  min_adjusted <- min_series - (skips / adjustment_factor)
  max_adjusted <- max_series + (skips / adjustment_factor)
  return(
    c(min_adjusted,
    seq(min_series,max_series,skips),
    max_adjusted)
    )
}

auto_lims <- function(breakvals) {
  min_break <- min(breakvals, na.rm = TRUE)
  max_break <- max(breakvals, na.rm = TRUE)
  return(c(min_break, max_break))
}
```

Below, I apply the functions to the data

```{r}
FANG %>% 
  group_by(symbol) %>% 
    mutate(`time period` = 1:n()) %>% 
  ungroup() %>% 
  {
    temp_df <- .
    symbs <- c("AMZN","FB","GOOG","NFLX")
    symb_dfs <- purrr::map(symbs, ~ filter(temp_df, symbol == .x))
    breaks_list <- purrr::map(symb_dfs, ~ round(auto_breaks(.$adjusted,
                                                            num_breaks = 3,
                                                            adjustment_factor = 1)
                                                ,0))
    print(breaks_list)
    lims_list <- purrr::map(breaks_list, auto_lims)
  }
```


It works! It chooses breaks and limits for each company.

```{r}
FANG %>% 
  group_by(symbol) %>% 
    mutate(`time period` = 1:n()) %>% 
  ungroup() %>% 
  {
    temp_df <- .
    symbs <- c("AMZN","FB","GOOG","NFLX")
    symb_dfs <- purrr::map(.x = symbs, .f = ~ filter(temp_df, symbol == .x))
    breaks_list <- purrr::map(.x = symb_dfs, .f = ~ round(auto_breaks(.$adjusted,
                                                                      num_breaks = 3,
                                                                      adjustment_factor = 1),
                                                          0))
    lims_list <- purrr::map(.x = breaks_list, .f = auto_lims)
    scales_listy <- purrr::map2(.x = breaks_list, 
                                .y = lims_list, 
                                .f = ~ scale_y_continuous(breaks = .x, 
                                                          limits = .y, 
                                                          sec.axis = dup_axis(name = " ", 
                                                                             labels = NULL),
                                                          expand = expansion(add = c(0,0))))
    
    scales_listx <- rep(list(scale_x_continuous(breaks = seq(0,1000,200),
                                                limits = c(0,1000),
                                                sec.axis = dup_axis(name = " ", labels = NULL),
                                                expand = expansion(add = c(0,0)))),
                        4)
    
    ggplot(.,aes(x = `time period`, y = adjusted)) +
     geom_line(color = "blue") +
     facet_wrap(~symbol, scales = "free") +
     facetted_pos_scales(y = scales_listy, x = scales_listx) + 
     theme_scientific
  }
```